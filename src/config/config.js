const serverSettings = {
  port: process.env.PORT || 8004,
  basePath: process.env.BASE_PATH || ''
}

const httpCode = {
  SUCCESS: 200,
  CREATED: 201,
  BAD_REQUEST: 400,
  TOKEN_EXPIRED: 409,
  UNKNOWN_ERROR: 520,
  FORBIDDEN: 403,
  ADMIN_REQUIRE: 406,
  UNAUTHORIZED: 401
}
const dbSettings = {
  db: process.env.DB || 'id-proxy',
  user: process.env.DB_USER || 'tee',
  pass: process.env.DB_PASS || 'teeidadmin',
  repl: process.env.DB_REPLS || '',
  servers: (process.env.DB_SERVERS) ? process.env.DB_SERVERS.split(',') : [
    '222.255.238.183:8016'
  ]
}

const blockchainConfig = {
  infuraID: process.env.INFURA_ID || '310c4684f9a44cb382ba0a0fd7c14f10',

}

const contractConfigs = {
  notificationAddr: process.env.NOTI_CONTRACT_ADDR || '',
  clientManagementAddr: process.env.CLIENT_MANAGEMENT_CONTRACT_ADDR || ''
}

const contractConfig = {
  idContract: {
    bytecode: process.env.ID_CONTRACT_BYTECODE || '0x60806040523480156200001157600080fd5b506040516200145838038062001458833981810160405281019062000037919062000129565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b6112ed806200016b6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632bb815461461005c57806350cec7ce1461008c5780638e5fe92c146100a8578063aecdff15146100cd578063f0efe237146100e9575b600080fd5b61007660048036038101906100719190610b4a565b610105565b6040516100839190610c12565b60405180910390f35b6100a660048036038101906100a19190610c6a565b610243565b005b6100b0610369565b6040516100c4989796959493929190610df3565b60405180910390f35b6100e760048036038101906100e29190610b4a565b61081a565b005b61010360048036038101906100fe9190610ea2565b6108d5565b005b606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90610f66565b60405180910390fd5b600a826040516101a59190610fc2565b908152602001604051809103902080546101be90611008565b80601f01602080910402602001604051908101604052809291908181526020018280546101ea90611008565b80156102375780601f1061020c57610100808354040283529160200191610237565b820191906000526020600020905b81548152906001019060200180831161021a57829003601f168201915b50505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c890610f66565b60405180910390fd5b87600260000190816102e391906111e5565b5086600260010190816102f691906111e5565b508560028001908161030891906111e5565b5084600260030181905550836002600401908161032591906111e5565b50826002600501908161033891906111e5565b50816002600601908161034b91906111e5565b50806002600701908161035e91906111e5565b505050505050505050565b6060806060600060608060608060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90610f66565b60405180910390fd5b6002600001600260010160028001600260030154600260040160026005016002600601600260070187805461043890611008565b80601f016020809104026020016040519081016040528092919081815260200182805461046490611008565b80156104b15780601f10610486576101008083540402835291602001916104b1565b820191906000526020600020905b81548152906001019060200180831161049457829003601f168201915b505050505097508680546104c490611008565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090611008565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050965085805461055090611008565b80601f016020809104026020016040519081016040528092919081815260200182805461057c90611008565b80156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b505050505095508380546105dc90611008565b80601f016020809104026020016040519081016040528092919081815260200182805461060890611008565b80156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b5050505050935082805461066890611008565b80601f016020809104026020016040519081016040528092919081815260200182805461069490611008565b80156106e15780601f106106b6576101008083540402835291602001916106e1565b820191906000526020600020905b8154815290600101906020018083116106c457829003601f168201915b505050505092508180546106f490611008565b80601f016020809104026020016040519081016040528092919081815260200182805461072090611008565b801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b5050505050915080805461078090611008565b80601f01602080910402602001604051908101604052809291908181526020018280546107ac90611008565b80156107f95780601f106107ce576101008083540402835291602001916107f9565b820191906000526020600020905b8154815290600101906020018083116107dc57829003601f168201915b50505050509050975097509750975097509750975097509091929394959697565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f90610f66565b60405180910390fd5b600a816040516108b89190610fc2565b908152602001604051809103902060006108d29190610993565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a90610f66565b60405180910390fd5b80600a836040516109749190610fc2565b9081526020016040518091039020908161098e91906111e5565b505050565b50805461099f90611008565b6000825580601f106109b157506109d0565b601f0160209004906000526020600020908101906109cf91906109d3565b5b50565b5b808211156109ec5760008160009055506001016109d4565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a5782610a0e565b810181811067ffffffffffffffff82111715610a7657610a75610a1f565b5b80604052505050565b6000610a896109f0565b9050610a958282610a4e565b919050565b600067ffffffffffffffff821115610ab557610ab4610a1f565b5b610abe82610a0e565b9050602081019050919050565b82818337600083830152505050565b6000610aed610ae884610a9a565b610a7f565b905082815260208101848484011115610b0957610b08610a09565b5b610b14848285610acb565b509392505050565b600082601f830112610b3157610b30610a04565b5b8135610b41848260208601610ada565b91505092915050565b600060208284031215610b6057610b5f6109fa565b5b600082013567ffffffffffffffff811115610b7e57610b7d6109ff565b5b610b8a84828501610b1c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bcd578082015181840152602081019050610bb2565b60008484015250505050565b6000610be482610b93565b610bee8185610b9e565b9350610bfe818560208601610baf565b610c0781610a0e565b840191505092915050565b60006020820190508181036000830152610c2c8184610bd9565b905092915050565b6000819050919050565b610c4781610c34565b8114610c5257600080fd5b50565b600081359050610c6481610c3e565b92915050565b600080600080600080600080610100898b031215610c8b57610c8a6109fa565b5b600089013567ffffffffffffffff811115610ca957610ca86109ff565b5b610cb58b828c01610b1c565b985050602089013567ffffffffffffffff811115610cd657610cd56109ff565b5b610ce28b828c01610b1c565b975050604089013567ffffffffffffffff811115610d0357610d026109ff565b5b610d0f8b828c01610b1c565b9650506060610d208b828c01610c55565b955050608089013567ffffffffffffffff811115610d4157610d406109ff565b5b610d4d8b828c01610b1c565b94505060a089013567ffffffffffffffff811115610d6e57610d6d6109ff565b5b610d7a8b828c01610b1c565b93505060c089013567ffffffffffffffff811115610d9b57610d9a6109ff565b5b610da78b828c01610b1c565b92505060e089013567ffffffffffffffff811115610dc857610dc76109ff565b5b610dd48b828c01610b1c565b9150509295985092959890939650565b610ded81610c34565b82525050565b6000610100820190508181036000830152610e0e818b610bd9565b90508181036020830152610e22818a610bd9565b90508181036040830152610e368189610bd9565b9050610e456060830188610de4565b8181036080830152610e578187610bd9565b905081810360a0830152610e6b8186610bd9565b905081810360c0830152610e7f8185610bd9565b905081810360e0830152610e938184610bd9565b90509998505050505050505050565b60008060408385031215610eb957610eb86109fa565b5b600083013567ffffffffffffffff811115610ed757610ed66109ff565b5b610ee385828601610b1c565b925050602083013567ffffffffffffffff811115610f0457610f036109ff565b5b610f1085828601610b1c565b9150509250929050565b7f596f75277265206e6f74206f776e6572206f6620546869732050726f66696c65600082015250565b6000610f50602083610b9e565b9150610f5b82610f1a565b602082019050919050565b60006020820190508181036000830152610f7f81610f43565b9050919050565b600081905092915050565b6000610f9c82610b93565b610fa68185610f86565b9350610fb6818560208601610baf565b80840191505092915050565b6000610fce8284610f91565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102057607f821691505b60208210810361103357611032610fd9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261109b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261105e565b6110a5868361105e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006110e26110dd6110d884610c34565b6110bd565b610c34565b9050919050565b6000819050919050565b6110fc836110c7565b611110611108826110e9565b84845461106b565b825550505050565b600090565b611125611118565b6111308184846110f3565b505050565b5b818110156111545761114960008261111d565b600181019050611136565b5050565b601f8211156111995761116a81611039565b6111738461104e565b81016020851015611182578190505b61119661118e8561104e565b830182611135565b50505b505050565b600082821c905092915050565b60006111bc6000198460080261119e565b1980831691505092915050565b60006111d583836111ab565b9150826002028217905092915050565b6111ee82610b93565b67ffffffffffffffff81111561120757611206610a1f565b5b6112118254611008565b61121c828285611158565b600060209050601f83116001811461124f576000841561123d578287015190505b61124785826111c9565b8655506112af565b601f19841661125d86611039565b60005b8281101561128557848901518255600182019150602085019450602081019050611260565b868310156112a2578489015161129e601f8916826111ab565b8355505b6001600288020188555050505b50505050505056fea264697066735822122045c14e315fbe2edb16b7730ce254641c9dfb881ddcaa52cba22751563fd3fcff64736f6c63430008110033'
  }
}

const serverHelper = function () {
  const jwt = require('jsonwebtoken')
  const crypto = require('crypto')
  const secretKey = process.env.SECRET_KEY || '112customer#$!@!'
  const secretKeyCMS = process.env.SECRET_KEY_CMS || 'cur$$1223456ABC@!$$jl1haG'

  function decodeToken (token) {
    return jwt.decode(token)
  }

  function genToken (obj) {
    return jwt.sign(obj, secretKey, { expiresIn: '1d' })
  }

  function verifyToken (token) {
    return new Promise((resolve, reject) => {
      jwt.verify(token, secretKey, (err, decoded) => {
        err ? reject(new Error(err)) : resolve(decoded)
      })
    })
  }
  function verifyCMSToken (token) {
    return new Promise((resolve, reject) => {
      jwt.verify(token, secretKeyCMS, (err, decoded) => {
        err ? reject(new Error(err)) : resolve(decoded)
      })
    })
  }

  function encryptPassword (password) {
    return crypto.createHash('sha256').update(password, 'binary').digest('base64')
  }

  function stringToSlug (str) {
    // const from = 'àáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîöüûñçýỳỹỵỷ'
    // const to = 'aaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiouuncyyyyy'
    // for (let i = 0, l = from.length; i < l; i++) {
    //   str = str.replace(RegExp(from[i], 'gi'), to[i])
    // }

    str = str
      // .toLowerCase()
      .trim()
      // .replace(/[^a-z0-9 \-]/g, '')
      .replace(/ +/g, '-')

    return str
  }

  function stringToSlugSearch (str) {
    const from = 'àáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîöüûñçýỳỹỵỷ'
    const to = 'aaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiouuncyyyyy'
    for (let i = 0, l = from.length; i < l; i++) {
      str = str.replace(RegExp(from[i], 'gi'), to[i])
    }

    str = str.toLowerCase()
      .trim()
      .replace(/[^a-z0-9 \-]/g, '')
      .replace(/ +/g, '-')

    return str
  }

  function deepCompare (x, y) {
    let i, l, leftChain, rightChain

    function compare2Objects (x, y) {
      let p

      // remember that NaN === NaN returns false
      // and isNaN(undefined) returns true
      if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
        return true
      }

      // Compare primitives and functions.
      // Check if both arguments link to the same object.
      // Especially useful on the step where we compare prototypes
      if (x === y) {
        return true
      }

      // Works in case when functions are created in constructor.
      // Comparing dates is a common scenario. Another built-ins?
      // We can even handle functions passed across iframes
      if ((typeof x === 'function' && typeof y === 'function') ||
        (x instanceof Date && y instanceof Date) ||
        (x instanceof RegExp && y instanceof RegExp) ||
        (x instanceof String && y instanceof String) ||
        (x instanceof Number && y instanceof Number)) {
        return x.toString() === y.toString()
      }

      // At last checking prototypes as good as we can
      if (!(x instanceof Object && y instanceof Object)) {
        return false
      }

      if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {
        return false
      }

      if (x.constructor !== y.constructor) {
        return false
      }

      if (x.prototype !== y.prototype) {
        return false
      }

      // Check for infinitive linking loops
      if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {
        return false
      }
      // Quick checking of one object being a subset of another.
      // todo: cache the structure of arguments[0] for performance

      for (p in y) {
        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false
        } else if (typeof y[p] !== typeof x[p]) {
          return false
        }
      }

      for (p in x) {
        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false
        } else if (typeof y[p] !== typeof x[p]) {
          return false
        }

        switch (typeof (x[p])) {
          case 'object':
          case 'function':

            leftChain.push(x)
            rightChain.push(y)

            if (!compare2Objects(x[p], y[p])) {
              return false
            }

            leftChain.pop()
            rightChain.pop()
            break

          default:
            if (x[p] !== y[p]) {
              return false
            }
            break
        }
      }

      return true
    }

    if (arguments.length < 1) {
      return true // Die silently? Don't know how to handle such case, please help...
      // throw "Need two or more arguments to compare";
    }

    for (i = 1, l = arguments.length; i < l; i++) {
      leftChain = [] // Todo: this can be cached
      rightChain = []

      if (!compare2Objects(arguments[0], arguments[i])) {
        return false
      }
    }

    return true
  }

  return { decodeToken, encryptPassword, verifyToken, genToken, deepCompare, stringToSlugSearch, stringToSlug }
}
module.exports = { dbSettings, serverHelper: serverHelper(), serverSettings, httpCode, blockchainConfig, contractConfigs, contractConfig }
